# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# azure-pipelines.yml
# azure-pipelines.yml
trigger:
  branches:
    include:
      - main

pool:
  name: Default            # Your self-hosted agent pool
  demands:
    - agent.os -equals Windows_NT

variables:
  VENV_PATH: '.venv'
  REPORTS_DIR: 'reports'
  PYTHON_PATH: 'C:\Python313\python.exe'  # <-- Replace with your actual Python path

steps:

# 1️⃣ Checkout repository
- task: Checkout@1

# 2️⃣ Verify Python version
- powershell: |
    $(PYTHON_PATH) --version
  displayName: 'Verify Python Version'

# 3️⃣ Setup virtual environment and install dependencies
- powershell: |
    # Remove existing venv if present
    if (Test-Path $(VENV_PATH)) { Remove-Item -Recurse -Force $(VENV_PATH) }

    # Create virtual environment using full Python path
    $(PYTHON_PATH) -m venv $(VENV_PATH)

    # Activate venv and upgrade pip
    .\$(VENV_PATH)\Scripts\Activate.ps1
    python -m pip install --upgrade pip

    # Install dependencies
    pip install -r requirements.txt
  displayName: 'Setup Python virtual environment'

# 4️⃣ Ensure reports folder exists
- powershell: |
    if (-not (Test-Path $(REPORTS_DIR))) { New-Item -ItemType Directory -Path $(REPORTS_DIR) }
  displayName: 'Create reports folder'

# 5️⃣ Run PyTest and generate XML report
- powershell: |
    .\$(VENV_PATH)\Scripts\Activate.ps1
    pytest --maxfail=1 --disable-warnings --junitxml=$(REPORTS_DIR)/results.xml
  displayName: 'Run PyTest Tests'

# 6️⃣ Publish test results to Azure DevOps Test tab
- task: PublishTestResults@2
  inputs:
    testResultsFiles: '$(REPORTS_DIR)/results.xml'
    testRunTitle: 'PyTest Results'
    mergeTestResults: true
    failTaskOnFailedTests: true

# 7️⃣ Publish test reports as build artifacts
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(REPORTS_DIR)'
    ArtifactName: 'TestReports'
    publishLocation: 'Container'