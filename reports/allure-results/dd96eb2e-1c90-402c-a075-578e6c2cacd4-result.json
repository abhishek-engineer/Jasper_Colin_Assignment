{"name": "test_profile_form_submission[user0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 137\nCurrent browser version is 139.0.7258.155 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception\nStacktrace:\n\tGetHandleVerifier [0x00007FF73B959625+76933]\n\tGetHandleVerifier [0x00007FF73B959680+77024]\n\t(No symbol) [0x00007FF73B718F2A]\n\t(No symbol) [0x00007FF73B75D16F]\n\t(No symbol) [0x00007FF73B75C1BB]\n\t(No symbol) [0x00007FF73B756835]\n\t(No symbol) [0x00007FF73B751A4D]\n\t(No symbol) [0x00007FF73B7A5328]\n\t(No symbol) [0x00007FF73B7A4900]\n\t(No symbol) [0x00007FF73B797343]\n\t(No symbol) [0x00007FF73B7603B1]\n\t(No symbol) [0x00007FF73B761143]\n\tGetHandleVerifier [0x00007FF73BC1F98D+2985965]\n\tGetHandleVerifier [0x00007FF73BC19F02+2962786]\n\tGetHandleVerifier [0x00007FF73BC38653+3087539]\n\tGetHandleVerifier [0x00007FF73B973EAA+185610]\n\tGetHandleVerifier [0x00007FF73B97B63F+216223]\n\tGetHandleVerifier [0x00007FF73B961AB4+110868]\n\tGetHandleVerifier [0x00007FF73B961C62+111298]\n\tGetHandleVerifier [0x00007FF73B948059+5817]\n\tBaseThreadInitThunk [0x00007FFD0174E8D7+23]\n\tRtlUserThreadStart [0x00007FFD03088D9C+44]", "trace": "@pytest.fixture(scope=\"function\")\n    def driver():\n        options = Options()\n        options.add_argument('--headless')  # run headless on CI/CD\n        options.add_argument('--no-sandbox')\n        options.add_argument('--disable-dev-shm-usage')\n    \n        # Selenium Manager will automatically download correct ChromeDriver\n>       driver = webdriver.Chrome(options=options)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nconftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:47: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:69: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:261: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:362: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000287813352B0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...3B948059+5817]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD0174E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFD03088D9C+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 137\nE       Current browser version is 139.0.7258.155 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF73B959625+76933]\nE       \tGetHandleVerifier [0x00007FF73B959680+77024]\nE       \t(No symbol) [0x00007FF73B718F2A]\nE       \t(No symbol) [0x00007FF73B75D16F]\nE       \t(No symbol) [0x00007FF73B75C1BB]\nE       \t(No symbol) [0x00007FF73B756835]\nE       \t(No symbol) [0x00007FF73B751A4D]\nE       \t(No symbol) [0x00007FF73B7A5328]\nE       \t(No symbol) [0x00007FF73B7A4900]\nE       \t(No symbol) [0x00007FF73B797343]\nE       \t(No symbol) [0x00007FF73B7603B1]\nE       \t(No symbol) [0x00007FF73B761143]\nE       \tGetHandleVerifier [0x00007FF73BC1F98D+2985965]\nE       \tGetHandleVerifier [0x00007FF73BC19F02+2962786]\nE       \tGetHandleVerifier [0x00007FF73BC38653+3087539]\nE       \tGetHandleVerifier [0x00007FF73B973EAA+185610]\nE       \tGetHandleVerifier [0x00007FF73B97B63F+216223]\nE       \tGetHandleVerifier [0x00007FF73B961AB4+110868]\nE       \tGetHandleVerifier [0x00007FF73B961C62+111298]\nE       \tGetHandleVerifier [0x00007FF73B948059+5817]\nE       \tBaseThreadInitThunk [0x00007FFD0174E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFD03088D9C+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: SessionNotCreatedException"}, "attachments": [{"name": "log", "source": "321c0508-a009-4d78-b63e-1f632f1faa25-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "user", "value": "{'firstname': 'Abhishek', 'lastname': 'Anand', 'email': 'abhishek.anand@example.com', 'gender': 'Male', 'mobile': '9999999999', 'address': 'Lakhnawali', 'state': 'NCR', 'city': 'Delhi'}"}], "start": 1756654592988, "stop": 1756654592988, "uuid": "650e4caa-2534-48cd-b0cf-a3df19b5e0b8", "historyId": "4638d80c93debe5345896b7533b5edcc", "testCaseId": "586a95305a0e2e6b841e7e50197e92f7", "fullName": "tests.test_profile_form#test_profile_form_submission", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_profile_form"}, {"name": "host", "value": "Bai-AbhishekAnand"}, {"name": "thread", "value": "32936-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_profile_form"}], "titlePath": ["tests", "test_profile_form.py"]}